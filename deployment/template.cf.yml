AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: tp-image-resize

Parameters:
  BucketName:
    Type: String

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Ref BucketName
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: Retain
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${S3Bucket}/*
            Principal: 
              CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId

  EdgeLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/service-role/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  ViewerRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../dist/viewerRequest.zip
      Handler: viewerRequest.handler
      Runtime: nodejs8.10
      MemorySize: 128
      Timeout: 1
      Role: !GetAtt EdgeLambdaRole.Arn
      AutoPublishAlias: live

  OriginResponseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../dist/originResponse.zip
      Handler: originResponse.handler
      Runtime: nodejs8.10
      MemorySize: 512
      Timeout: 5
      Role: !GetAtt EdgeLambdaRole.Arn
      AutoPublishAlias: live 

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt S3Bucket.DomainName
            Id: myS3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOAI}
        Enabled: 'true'
        DefaultCacheBehavior:
          TargetOriginId: myS3Origin
          LambdaFunctionAssociations:
            - EventType: 'viewer-request'
              LambdaFunctionARN: !Ref ViewerRequestFunction.Version
            - EventType: 'origin-response'
              LambdaFunctionARN: !Ref OriginResponseFunction.Version
          ForwardedValues:
            QueryString: 'true'
            QueryStringCacheKeys:
              - color
              - format
              - size
            Cookies:
              Forward: 'none'
          ViewerProtocolPolicy: allow-all
          MinTTL: '3600'
          SmoothStreaming: 'false'
          Compress: 'true'
        HttpVersion: http2
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'
  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'To access to ${S3Bucket}'

Outputs:
  ImageBucket:
    Value: !Ref S3Bucket
  DistributionId:
    Value: !Ref CloudFrontDistribution
  CloudFrontURL:
    Value: !GetAtt CloudFrontDistribution.DomainName
  ViewerRequestFunctionVersion: 
    Value: !Ref ViewerRequestFunction.Version
  OriginResponseFunctionVersion: 
    Value: !Ref OriginResponseFunction.Version
