AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: tp-image-resize

Parameters:
  BucketName:
    Type: String

Resources:
  ImageBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: PublicRead
      BucketName: !Ref BucketName
  ImageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImageBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Principal: "*"
            Resource: !Sub arn:aws:s3:::${ImageBucket}/*
          - Action:
              - s3:GetObject
            Effect: Allow
            Principal:
              AWS: !GetAtt EdgeLambdaRole.Arn
            Resource: !Sub arn:aws:s3:::${ImageBucket}/*
  EdgeLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/service-role/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  ViewerRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../dist/viewerRequest.zip
      Handler: viewerRequest.handler
      Runtime: nodejs8.10
      MemorySize: 128
      Timeout: 1
      Role: !GetAtt EdgeLambdaRole.Arn
      AutoPublishAlias: live 

  OriginResponseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../dist/originResponse.zip
      Handler: originResponse.handler
      Runtime: nodejs8.10
      MemorySize: 512
      Timeout: 5
      Role: !GetAtt EdgeLambdaRole.Arn
      AutoPublishAlias: live 

  MyDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !Sub ${ImageBucket}.s3.amazonaws.com
          Id: myS3Origin
          S3OriginConfig: {}
        Enabled: 'true'
        Comment: Content delivery
        DefaultCacheBehavior:
          TargetOriginId: myS3Origin
          LambdaFunctionAssociations:
            - EventType: 'viewer-request'
              LambdaFunctionARN: !Ref ViewerRequestFunction.Version
            - EventType: 'origin-response'
              LambdaFunctionARN: !Ref OriginResponseFunction.Version
          ForwardedValues:
            QueryString: 'true'
            QueryStringCacheKeys:
              - color
              - format
              - size
            Cookies:
              Forward: 'none'
          ViewerProtocolPolicy: allow-all
          MinTTL: '100'
          SmoothStreaming: 'false'
          Compress: 'true'
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'

Outputs:
  ImageBucket:
    Value: !Ref ImageBucket
  DistributionId:
    Value: !Ref MyDistribution
  CloudfrontURL:
    Description: CloudfrontURL
    Value: !Join
      - ""
      - - "https://"
        - !Ref MyDistribution
        - ".cloudfront.com"

